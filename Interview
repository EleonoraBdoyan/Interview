# ToDo List
# Write a task organizing program.
# The aim of the program is to provide a console interface, with the help of which the user can see his/her daily
# tasks. Each task should be only one sentence.
# The user should be able to add tasks, see all the tasks, mark if the task is done or not and remove the task from
# the list if necessary.
# For the actions (mentioned above) to be performed the program should provide a list of commands that correspond to
# those actions.
# The tasks should be kept in a separate text file, so that they are not lost when the user closes the program.
dictionary = {}
f = open("tasks.txt", "w")

def add_task():
    f = open("tasks.txt", "w")
    dictionary[num] = text
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")

def see_task():
    print(open("tasks.txt").read())

def mark_task():
    f = open("tasks.txt", "w")
    dictionary[number] += "-is done"
    print(dictionary)
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")


def remove_task():
    f = open("tasks.txt", "w")
    dictionary.pop(number)
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")

while True:
    question = input("Enter add to add task, see to see task, mark to mark task, remove to remove task, close to close the programm. ")
    if question == "add":
        num = input("Enter number of task. ")
        text  = input("Enter task. ")
        add_task()
    elif question == "see":
        see_task()
    elif question == "mark":
        number = input("Enter number of task. ")
        mark_task()
    elif question == "remove":
        numb = input("Enter number of task. ")
        remove_task()
    elif question == "close":
        break
    else:
        print("Enter add, see, mark or remove. ")
        
        
        
 # The digital root of a number n is obtained as follows: Add up the digits n to get a new number.
# Add up the digits of that to get another new number. Keep doing this until you get a number that has
# only one digit. That number is the digital root. For example, if n = 45893, we add up the digits to get
# 4 + 5 + 8 + 9 + 3 = 29. We then add up the digits of 29 target 2+9=11.
# We then add up the digits of 11toget 1+1=2. Since 2 has only one digit, 2 is our digital root.

def digital_root(number):
    s = str(number)
    while len(s) != 1:
        s_sum = 0
        for i in s:
            s_sum += int(i)
        s = str(s_sum)
    return s

print(digital_root(45893))

# Write a function that is given a 9 × 9 potentially solved Sudoku and returns True if it is solved
# correctly and False if there is a mistake. The Sudoku is correctly solved if there
# are no repeated numbers in any row or any column or in any of the nine “blocks.”

sudoku_table = [[5,3,4,6,7,8,9,1,2],
               [6,7,2,1,9,5,3,4,8],
               [1,9,8,3,4,2,5,6,7],
               [8,5,9,7,6,1,4,2,3],
               [4,2,6,8,5,3,7,9,1],
               [7,1,3,9,2,4,8,5,6],
               [9,6,1,5,3,7,2,8,4],
               [2,8,7,4,1,9,6,3,5],
               [3,4,5,2,8,6,1,7,9]]



def sudoku_valid(sudoku_table):
    blocks = []
    for i in [0, 3, 6]:
        for j in [0, 3, 6]:
            block = [sudoku_table[i + m][j + n] for m in range(3) for n in range(3)]
            blocks.append(block)
    if all(len(set(i)) == 9 for i in sudoku_table) and all(len(set(i)) == 9 for i in blocks) and all(len(set(k)) == 9 for k in [[sudoku_table[i][j] for i in range(len(sudoku_table))] for j in range(len(sudoku_table))]):
        print("valid")
    else:
        print("Invalid")


sudoku_valid(sudoku_table)



# You are given a file called students.txt.
#
# A typical line in the file looks like:
# walter melon melon@email.msmary.edu 555-3141
#
# There is a name, an email address, and a phone number, each separated by tabs. Write a program that
# reads through the file line-by-line, and for each line, capitalizes the first letter of the first and
# last name and adds the area code 301 to the phone number. Your program should write this to a new file
# called students2.txt. Here is what the first line of the new file should look like:
#
#  Walter Melon        melon@email.msmary.edu        301-555-3141 can you generate students.txt

f = open("students.txt", "a+")
f1 = open("students1.txt", "a+")
f.write("walter melon melon@email.msmary.edu 555-3141\n")
f.seek(0)
for i in open("students.txt"):
    k = i.split()
    k[0]=k[0].capitalize()
    k[1]=k[1].capitalize()
    k[-1] = "301-" + k[-1]
    f1.write((" ".join(k)) + "\n")
f1.seek(0)
print(f1.read())




