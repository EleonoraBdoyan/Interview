# ToDo List
# Write a task organizing program.
# The aim of the program is to provide a console interface, with the help of which the user can see his/her daily
# tasks. Each task should be only one sentence.
# The user should be able to add tasks, see all the tasks, mark if the task is done or not and remove the task from
# the list if necessary.
# For the actions (mentioned above) to be performed the program should provide a list of commands that correspond to
# those actions.
# The tasks should be kept in a separate text file, so that they are not lost when the user closes the program.
dictionary = {}
f = open("tasks.txt", "w")

def add_task():
    f = open("tasks.txt", "w")
    dictionary[num] = text
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")

def see_task():
    print(open("tasks.txt").read())

def mark_task():
    f = open("tasks.txt", "w")
    dictionary[number] += "-is done"
    print(dictionary)
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")


def remove_task():
    f = open("tasks.txt", "w")
    dictionary.pop(number)
    for key in dictionary:
        f.write(f"{key}\t{dictionary[key]}\n")

while True:
    question = input("Enter add to add task, see to see task, mark to mark task, remove to remove task, close to close the programm. ")
    if question == "add":
        num = input("Enter number of task. ")
        text  = input("Enter task. ")
        add_task()
    elif question == "see":
        see_task()
    elif question == "mark":
        number = input("Enter number of task. ")
        mark_task()
    elif question == "remove":
        numb = input("Enter number of task. ")
        remove_task()
    elif question == "close":
        break
    else:
        print("Enter add, see, mark or remove. ")
        
        
        
 # The digital root of a number n is obtained as follows: Add up the digits n to get a new number.
# Add up the digits of that to get another new number. Keep doing this until you get a number that has
# only one digit. That number is the digital root. For example, if n = 45893, we add up the digits to get
# 4 + 5 + 8 + 9 + 3 = 29. We then add up the digits of 29 target 2+9=11.
# We then add up the digits of 11toget 1+1=2. Since 2 has only one digit, 2 is our digital root.

def digital_root(number):
    s = str(number)
    while len(s) != 1:
        s_sum = 0
        for i in s:
            s_sum += int(i)
        s = str(s_sum)
    return s

print(digital_root(45893))

# Write a function that is given a 9 × 9 potentially solved Sudoku and returns True if it is solved
# correctly and False if there is a mistake. The Sudoku is correctly solved if there
# are no repeated numbers in any row or any column or in any of the nine “blocks.”

sudoku_table = [[5,3,4,6,7,8,9,1,2],
               [6,7,2,1,9,5,3,4,8],
               [1,9,8,3,4,2,5,6,7],
               [8,5,9,7,6,1,4,2,3],
               [4,2,6,8,5,3,7,9,1],
               [7,1,3,9,2,4,8,5,6],
               [9,6,1,5,3,7,2,8,4],
               [2,8,7,4,1,9,6,3,5],
               [3,4,5,2,8,6,1,7,9]]



def sudoku_valid(sudoku_table):
    blocks = []
    for i in [0, 3, 6]:
        for j in [0, 3, 6]:
            block = [sudoku_table[i + m][j + n] for m in range(3) for n in range(3)]
            blocks.append(block)
    if all(len(set(i)) == 9 for i in sudoku_table) and all(len(set(i)) == 9 for i in blocks) and all(len(set(k)) == 9 for k in [[sudoku_table[i][j] for i in range(len(sudoku_table))] for j in range(len(sudoku_table))]):
        print("valid")
    else:
        print("Invalid")


sudoku_valid(sudoku_table)



# You are given a file called students.txt.
#
# A typical line in the file looks like:
# walter melon melon@email.msmary.edu 555-3141
#
# There is a name, an email address, and a phone number, each separated by tabs. Write a program that
# reads through the file line-by-line, and for each line, capitalizes the first letter of the first and
# last name and adds the area code 301 to the phone number. Your program should write this to a new file
# called students2.txt. Here is what the first line of the new file should look like:
#
#  Walter Melon        melon@email.msmary.edu        301-555-3141 can you generate students.txt

f = open("students.txt", "a+")
f1 = open("students1.txt", "a+")
f.write("walter melon melon@email.msmary.edu 555-3141\n")
f.seek(0)
for i in open("students.txt"):
    k = i.split()
    k[0]=k[0].capitalize()
    k[1]=k[1].capitalize()
    k[-1] = "301-" + k[-1]
    f1.write((" ".join(k)) + "\n")
f1.seek(0)
print(f1.read())


# The Library Management System is a program that allows users to manage a library collection of books.
# The system provides the following functionalities:
# Add Books: The user is allowed to enter the full name of the author, the name of the book and its publication date
# . The list of all the books should be kept in a text file.
# Remove Books: The user is allowed to remove a book from the list by using its name.
# View All Books: The user can see the list of all the books in the library.
# Sort Books Alphabetically: The user can make the sorted list of all the books in the library.
# The system should store the library's book collection in a text file. When the program starts,
# it should read the file and load the books into memory. When the user makes changes to the library,
# such as adding or removing a book, the program should update the file accordingly. To implement this
# system, you can use Python's built-in file handling capabilities to read and write to the file that stores
# the library collection. You can also use Python's data structures like lists and dictionaries to store the
# book collection in memory and provide the necessary functionalities like sorting and removing books.


dictionary  = {}

def file_update():
    file = open("library.txt", "w+")
    for i in dictionary:
        file.write(f"{i}\t{dictionary[i]}\n")


def add_books():
    book_name = input("Enter book name: ")
    book_author = input("Enter book author: ")
    date = input("Enter publication date: ")
    dictionary[book_name] = book_author + " " + date
    file_update()

def remove_books():
    book_name = input("Enter book name: ")
    dictionary.pop(book_name)
    file_update()
    print(open("library.txt").read())


def view_books():
    print(open("library.txt").read())

def sort_books():
    for i in sorted(dictionary):
        print(i, dictionary[i])




while True:
    action = input("Enter add to add books, remove to remove books, view to view all books, sort to sort books, close to close programm.  ")
    if action.lower() == "add":
        add_books()
    elif action.lower() == "remove":
        remove_books()
    elif action.lower() == "view":
        view_books()
    elif action.lower() == "sort":
        sort_books()
    elif action.lower() == "close":
        break


# Write a program that works with a text file. The aim of the program is to read a text from the text
# file and analyze it. Specifically it should count and print:
# the number of words
# the number of letters
# the number of sentences
# the most used letter in a text
# the most used word in a text
# For example if out text file contains this text:
# “Hello from C++ world”
# the program should give the following output:
# Words: 4
# Letters: 15 (special characters and space are not counted)
# Sentences: 1
# Letter frequency: o (both o and l are used 3 times so any of the letters is considered as a right answer)
# Word frequency: 0 (there is no word that is used more than once)
# The result should be kept in a separate text file.

file = open("library.txt")
list_content = file.read().split()
print(list_content)
num_words = 0
num_letters = 0
num_sentence = 0
for i in list_content:
    if i[0].isalpha():
        num_words += 1
        for j in i:
            if j.isalpha():
                num_letters += 1
    if i[-1] == ".":
        num_sentence += 1

list_content_lower = [i.lower() for i in list_content]
word_count = [list_content_lower.count(i) for i in list_content_lower]
most_used_word  = {i for i in list_content_lower  if list_content_lower.count(i) == max(word_count)}
word_content_lower = [j.lower() for i in list_content for j in i if j.isalpha()]
letter_count = [word_content_lower.count(i) for i in word_content_lower]
most_used_letter = {i for i in word_content_lower if word_content_lower.count(i) == max(letter_count)}

file2  = open("library2.txt", "w")
file2.write(f"The number of words is {num_words}\nThe number of letters is {num_letters}\nThe number of sentences is {num_sentence}\nThe most used letter in a text is {most_used_letter}\nThe most used word in a text is {most_used_word}")



# Phone Book
# Implement a program, that allows to register a contact information (name, surname, phone number, address).
# The program should provide a console interface , where the user is able to add a new contact , edit the contact
#
# information of the already existing one and remove one of the contacts.
# All the registered information should be kept in a text file, so that it is not lost after closing the program.
# After any change of the contact information it should be saved in the existing file. During the time the program
# runs it should be able to read from the text file where all the information is kept.

dictionary = {}
file = open("contact.txt", "w")

def update():
    file = open("contact.txt", "w")
    for i in dictionary:
        file.write(f"{i}\t{dictionary[i]}\n")



def add():
    name  = input("Enter name: ")
    surname = input("Enter surname: ")
    phone_number = input("Enter phone number: ")
    address = input("Enter address: ")
    dictionary[phone_number] = name + " " + surname + " " + address
    update()

def edit():
    while True:
        phone_number = input("Enter phone number: ")
        if phone_number not in dictionary.keys():
            print("Enter correct phone number: ")
            continue
        else:
            edit_data = input("Enter what do you want to edit: name, surname, phone number or address: ")
            if edit_data.lower() == "name":
                name = input("Enter new name: ")
                dictionary[phone_number] = name + " " + surname + " " + address
                update()
                break
            if edit_data.lower() == "surname":
                surname = input("Enter new surname: ")
                dictionary[phone_number] = name + " " + surname + " " + address
                update()
                break
            if edit_data.lower() == "address":
                address = input("Enter new address: ")
                dictionary[phone_number] = name + " " + surname + " " + address
                update()
                break
            if edit_data.lower() == "phone number":
                value = dictionary[phone_number]
                dictionary.pop(phone_number)
                phone_number_new = input("Enter  new phone number: ")
                dictionary[phone_number_new] = value
                update()
                break


def remove():
    while True:
        phone_number = input("Enter contact phone number you want to remove: ")
        print(phone_number in dictionary.keys())
        if phone_number in dictionary.keys():
            dictionary.pop(phone_number)
            update()
            break
        else:
            print("Phone number not in contacts.")
            continue

def read():
    file = open("contact.txt", "r")
    print(file.read())



while True:
    action = input("Enter add, edit, remove, read or close: ")
    if action.lower().strip() == "add":
        add()
    if action.lower().strip() == "edit":
        edit()
    if action.lower().strip() == "remove":
        remove()
    if action.lower().strip() == "read":
        read()
    if action.lower().strip() == "close":
        break



# File Compression: Write a Python program that compresses a text file by replacing repeated characters
# with a single character and a count of the number of repetitions. For example, the string "aaabbbcccc"
# should be compressed to "a3b3c4". Your program should prompt the user to enter the name of the input file
# and the name of the output file



output_file_name = input("Enter output file name: ")
try:
    output_file = open(output_file_name, "r")
except FileNotFoundError:
    print(f"There is no file with name {output_file_name}. ")

else:
    compressed_text = []
    for i in output_file.read().split():

        s = i[0]
        count = 1

        for j in range(1,len(i)):
            if i[j] == i[j-1]:
                count += 1
            if i[j] != i[j-1] and count > 1:
                s += str(count)
                count = 1
                s += i[j]
            if j == len(i) -1 and count > 1:
                s += str(count)
        compressed_text.append(s)
finally:
    output_file.close()
input_file_name = input("Enter input file name: ")

input_file = open(input_file_name, "w+")
for i in compressed_text:
    input_file.write(f"{i}\t")
input_file.seek(0)
print(input_file.read())





# You are given a file namelist.txt that contains a bunch of names. Print out all the names in the list
# in which the vowels a, e, i, o, and u appear in order (with repeats possible). The first vowel in the
# name must be a and after the first u, it is okay for there to be other vowels. An example is Ace Elvin Coulson.


file = open("heloo.txt", "r")
name_list = file.read().split()
print(name_list)
vowels = ["a","e","i","o","u"]
name_with_vowel = []
for i in name_list:
    for j in i:
        if j.lower() in vowels:
            name_with_vowel.append(i)
name_with_vowel = list(set(name_with_vowel))
print(name_with_vowel)
s = ""
s_list = list(s)
def vowels_str(word):
    s = ""
    for i in word:
        if i.lower() in vowels:
            s += i.lower()
    return s
l = list(map(vowels_str,name_with_vowel))
print(l)
result = []
for i in range(len(name_with_vowel)):
    if "u" not in name_with_vowel[i]:
        if l[i] == "".join(sorted(l[i])):
            result.append(name_with_vowel[i])
    if "u" in name_with_vowel[i]:
        u_index = l[i].index("u")
        if l[i][:u_index + 1] == "".join(sorted(l[i][:u_index + 1])):
            result.append(name_with_vowel[i])

print(result)



# An acronym is an abbreviation that uses the first letter of each word in a phrase. We see them everywhere.
# For instance, NCAA for National Collegiate Athletic Association or NBC for National Broadcasting Company.
# Write a program where the user enters an acronym and the program randomly selects words from a wordlist such
# that the words would fit the acronym. Below is some typical output generated when I ran the program:
import random
wordlist = ["National", "collegiate", "Athletic", "Association", "Broadcasting", "Company"]
acronym = (input("Enter acronym. ")).lower()
wordlist_lower = list(((i[0].lower() + i[1:]) for i in wordlist))
pack_list = []
for i in range(len(acronym)):
    pack_list.append(list())
for i in range(len(acronym)):
    for j in wordlist_lower:
        if j[0] == acronym[i].lower():
            pack_list[i].append(j)
if all(len(i) > 0 for i in pack_list):
    s = ""
    for i in range(len(pack_list)):
        s += random.choice(pack_list[i]) + " "
    print(s)
else:
    print("There are no words that fit the acronym.")





# JSON Editor
# Write a program that takes as an input argument a text file in JSON format. The program should be
# able to decode the content of the JSON file and allow to make changes directly on the file. For example
# you have a file with the following content:
# {“name”: “Angela”, “age”:23, “address”: {“street”: “halabyan”}}
# When passing the file to the program it decodes the content and allows the user to make changes
# on a file, for example, the user enters the following command:
# name=Jonny
# in the result the program should change the JSON file to:
# {“name”: “Jonny”, “age”:23, “address”: {“street”: “halabyan”}}
# Another example, the user enters the following command:
# address.street=tumanyan
# in the result the program should change the JSON file to:
# {'name': 'Jonny', 'age':23, 'address': {street: tumanyan}}
# Write a program that allows to work with any depth of a JSON file. You can find more information
# on a JSON file format here -> JSON
import json
with open("file.json", "r") as f:
    data = json.load(f)
    print(type(data))
def flatten_data(data):
    flat_dict = {}
    for key, value in data.items():
       if not isinstance(value,dict):
            flat_dict[key] = value
       else:
            flat_dict.update(flatten_data(value))
    return flat_dict
flat_dict = flatten_data(data)
keys = [i for i in flat_dict]
parameter = input("Enter changes you want to do in the following format: parameter.parameter=change ")
change = parameter.split("=")[-1]
parameter = parameter.split("=")[:-1]
parameter = parameter[0].split(".")
parameter = [i.strip() for i in parameter]
print(parameter)
if len(parameter) > 1:
    for i in range(len(parameter)-1):
        k = data.get(parameter[i])
        if i == len(parameter) - 2:
            k[parameter[-1]] = change
else:
    data[parameter[0]] = change
with open("file.json", "w") as f:
    json.dump(data,f)


# Data Validator
# Write a program that performs checking on the entered data, specifically it should check
# whether the following types of data are entered correctly:
# Email
# Website URL
# Date
# Number
# Credit Card Number
# Mobile Phone Number
# The program asks the user to choose one of the above mentioned types of data and
# then enters the data he/she wants to check. For example the user chooses an Email option and then enters wrong@email . The program should check the format of the email and should tell the user that it is not a valid email. This applies to all the types of data.
# Text Analyzer



def email_valid(input_data):
    import re
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
    if bool(re.match(regex,input_data)):
        return "Valid"
    return "Invalid Email."


def date_valid(input_data):
    import datetime
    try:
        datetime.datetime.strptime(input_data,"%d-%m-%Y")
        print("Valid")

    except ValueError:
        print("Invalid date format.")

def number_valid(input_data):
    if all(i.isdigit() for i in input_data):
        return "Valid"
    return "Invalid number."

def card_valid(input_data):
    input_data = input_data.replace(" ","").replace("-","")
    print(input_data)
    if input_data[0] == "4" and len(input_data) == 16 and all(i.isdigit() for i in input_data):
        card_number = input_data[::-1]
        sum_rev = 0
        for i in range(1,(len(card_number) +1),2):
            for j in str(int(card_number[i]) * 2):
                sum_rev += int(j)
        for k in range(0,len(card_number),2):
            sum_rev += int(card_number[k])
        if sum_rev % 10 == 0:
            return "Valid"
    return "Invalid credit card number"

def phone_valid(input_data):
    valid_oper = ["93","94","98","91","43","11"]
    input_data = input_data.replace(" ","").replace("-","")
    if (input_data[0] == "0" and input_data[1:3] in valid_oper and len(input_data[3:]) == 6) or \
            (input_data[0:3] == "374" and input_data[3:5] in valid_oper and len(input_data[5:]) == 6):
        return "Valid"
    return "Invalid phone number."
    
def url_valid(input_data):
    domain_extension = ["com", "net", "ru", "uk", "org", "info", "eu"]
    first_part = r"https://"
    if (input_data.startswith(first_part) and "." in input_data and \
        input_data[input_data.find(r"//") +2:input_data.find(".")].isalpha()):
        for i in domain_extension:
            if input_data[input_data.find(".")+1:].startswith(i):
                return "Valid"
    return "Invalid"



data_type = input("Enter 1 to validate Email, 2 for Data YYYY-MM-DD, 3 for Number, 4 for Credit Card Number, 5 for Mobile phone number, 6 for Website URL. ")
data_type_list = ["1", "2","3","4","5", "6" ]
func_list = [email_valid, date_valid, number_valid, card_valid, phone_valid]

dictionary = dict(zip(data_type_list,func_list))


for i in dictionary:
    if data_type == i:
        input_data = input("Enter data: ")
        print(dictionary[i])
        print(dictionary[i](input_data))




# Write a Python program that allows users to analyze a text file and extract useful information.
# The program should prompt the user to enter the name of the file to analyze, and then offer several analysis options:
# Word Count: The program should count the total number of words in the file.
# Character Count: The program should count the total number of characters (including spaces) in the file.
# Line Count: The program should count the total number of lines in the file.
# Most Frequent Words: The program should display the 10 most frequent words in the file, along with their frequencies.
# Word Search: The program should prompt the user to enter a word to search for in the file, and then display
# all instances of that word, along with the line numbers where they occur.

file_name  = input("Enter file name: ")
try:
    f = open(f"{file_name}.txt")
except FileNotFoundError:
    print("File does not exist.Enter another file name.")

else:
    def word_count():
        w_count = 0
        for i in f.read().split():
            if any(j.isalpha() for j in i):
                w_count += 1
        return w_count


    def character_count():
        n = f.read().count("\n")
        f.seek(0)
        return len(f.read()) - n


    def line_count():
        l_count = 0
        for i in f.readlines():
            l_count += 1
        return l_count

    def freq_word():
        f_count = []
        for i in f.read().split():
            if any(j.isalpha() for j in i):
                f_count.append(i.lower())
        result = {i:f_count.count(i) for i in f_count}
        return sorted(result.items(), key=lambda x:x[1], reverse=True)[:10]

    def word_search():
        word = input("Enter a word. ")
        if word in f.read():
            result = []
            for i,j in enumerate(open(f"{file_name}.txt").readlines(), start=1):
                if word.strip() in j:
                    result.append(f"'{word}' appears {j.count(word)} time in line N {i}")
            return result
        return "No such a word in the file"



    action = input("Enter 1 for word count, 2 for character count, 3 for line count, 4 for most frequent word, 5 for word search. ")
    data_type_list = ["1", "2", "3", "4", "5"]
    func_list = [word_count, character_count, line_count, freq_word, word_search]
    dictionary = dict(zip(data_type_list, func_list))
    for i in dictionary:
       if action == i:
           print(dictionary[i]())


# Crossword cheater: When working on a crossword puzzle, often you will have a word where you know several
# of the letters, but not all of them. You can write a computer program to help you. For the program,
# the user should be able to input a word with the letters they know filled in and asterisks for those
# they don’t know. The program should print out a list of all words that fit that description. For example,
# the input th***ly should return all the words that could work, namely thickly and thirdly.
list_of_words = ["thickly", "thirdly", "hello", "world", "python", "version"]

def crossword_cheater(word):
    list_of_word_length =[]
    for i in list_of_words:
        if len(i) == len(word):
            list_of_word_length.append(i)
    print(list_of_word_length)
    result  = []
    for i in list_of_word_length:
        k = list(zip(i,word))
        if all(len(set(j)) == 1 for j in k if "*" not in j):
            result.append(i)
    return result if result else "No word matching."

word  = input("Enter a word with the letters you know filled in and asterisks for those you don’t know. ")
print(crossword_cheater(word))



# Hangman Games writes a Python program that allows users to play a game of hangman.
# The program should generate a random word from a predefined list of words, and then prompt
# the user to guess letters in the word. The user should be allowed to make a limited number of
# incorrect guesses before they lose the game.
#
# The program should use a pre-defined list of words, stored in a separate text file, with one word per line.
# The program should display the number of letters in the word, with each unknown letter represented by an underscore (_).
# The user should be allowed to guess one letter at a time. The program should display the letters that have
# already been guessed, along with the remaining number of guesses.
# If the user correctly guesses a letter, the program should update the display to show the letter
# in the correct position(s).
# If the user makes an incorrect guess, the program should decrement the remaining number of guesses
# and display a hangman graphic.
# If the user correctly guesses all of the letters in the word before running out of guesses, the
# program should display a message indicating that they won the game.
# If the user runs out of guesses before correctly guessing all of the letters in the word, the
# program should display a message indicating that they lost the game, and reveal the word.

import random
pre_def = open("heloo.txt").read().split()
word_to_guess = random.choice(pre_def)
print(word_to_guess)
display = []

def play():
    wrong_answer = len(word_to_guess) // 2
    display = []
    for i in range(len(word_to_guess)):
        display.append("-")
    print(display)
    while True:
        print(f'Guess the following word: {display}. You have {wrong_answer} chance for wrong answer.')
        position = input("Enter number of position: ")
        if not position.isdigit() or not 1 <= int(position) <= len(word_to_guess):
            print("Enter correct position. ")
            continue
        letter = input("Enter letter: ")
        if display[int(position) -1] != "-":
            print("The position is already filled: Try again.")
            continue
        if display[int(position) -1] == "-" and letter == word_to_guess[int(position) -1]:
            display[int(position)-1] = letter
            print(display)
            print("".join(display))
            if  "".join(display) == word_to_guess:
                print("You won.")
                break
        if display[int(position) - 1] == "-" and letter != word_to_guess[int(position) - 1]:
            print("The answer is not correct.")
            wrong_answer = wrong_answer - 1
            if wrong_answer < 0:
                print("You lost.")
                break


play()

# File Encryption and Decryption
#
# Write a Python program that allows users to encrypt and decrypt files using a symmetric-key algorithm.
# The program should prompt the user to specify the name of the file to encrypt or decrypt, along with the
# key to use for encryption or decryption.
#
# The program should use a symmetric-key algorithm, such as AES or DES, to encrypt and decrypt files. You can
# use a third-party library such as PyCryptodome or cryptography to implement the algorithm.
# The program should handle input errors gracefully, and provide helpful error messages if the file cannot be
# found or if the user enters invalid input.
# The program should create a new file with the encrypted or decrypted data, leaving the original file unchanged.
# The program should use a secure method for storing the encryption key, such as a password-protected file or a
# keyfile protected by a master password.
# The program should allow the user to specify custom options for encryption or decryption, such as the mode of
# operation or the padding scheme.
from cryptography.fernet import Fernet
key = Fernet.generate_key()
print(key)
print(str(key))

with open("mykey.key", "wb") as mykey:
    mykey.write(key)

def enc():
    try:

        file_answ = input("Enter file name.")
        with open(file_answ, "rb") as original_file:
            original = original_file.read()
    except FileNotFoundError:
        print("There is no such a file.")
    else:
        f = Fernet(key)
        encrepted = f.encrypt(original)
        enc_file_name = input("Enter name for encrepted file. ")
        with open(enc_file_name, "wb") as encrepted_file:
            encrepted_file.write(encrepted)
def dec():
    try:
        file_answ = input("Enter  encrepted file name. ")
        with open(file_answ, "rb") as encrepted_file:
            encrepted = encrepted_file.read()
            print(encrepted)
    except FileNotFoundError:
        print("There is no such a file.")
    else:
        f = Fernet(key)
        decrepted = f.decrypt(encrepted)
        print(decrepted)
        dec_file_name = input("Enter name for decrepted file. ")
        with open(dec_file_name, "wb") as decrepted_file:
            decrepted_file.write(decrepted)

key_answ = input("Enter key. ")
if bytes(key_answ, 'utf-8') != key:
    print("Wrong key")
else:
    action = input("Enter 1 ro encrypt file, 2 to decrypt file. ")
    if action == "1":
        enc()
    elif action == "2":
        dec()
    elif action != "1" or action != "2":
        print("You must enter 1 or 2.")


